package com.eventer.eventer;

import android.content.Context;
import android.content.Intent;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.NavigationView;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.DisplayMetrics;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;

import com.balysv.materialmenu.MaterialMenuDrawable;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;


public class Main extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener {
    //autogenerated variables has m prefix because android's naming convention for class members are supposed to have m prefix
    public static Context baseContext;
    public static String SECTION = "section";
    public static int CAMERA_PIC_REQUEST = 2;
    public Uri tempUri;
    /**
     * Fragment managing the behaviors, interactions and presentation of the navigation drawer.
     */
    private NavigationView mNavigationView;
    private DrawerLayout mDrawerLayout;
    /**
     * Used to store the last screen title.
     */
    private CharSequence mTitle;
    private MaterialMenuDrawable materialMenu;
    ;
    private Toolbar mToolbar;

    public static int dpToPx(int dp) {
        DisplayMetrics displayMetrics = baseContext.getResources().getDisplayMetrics();
        return (int) ((dp * displayMetrics.density) + 0.5);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_events);
        baseContext = getApplicationContext();
        mToolbar = (Toolbar)findViewById(R.id.toolbar);
        setSupportActionBar(mToolbar);
        mToolbar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override public void onClick(View v) {
                // Handle your drawable state here
                materialMenu.animateIconState(MaterialMenuDrawable.IconState.BURGER);
            }
        });
        materialMenu = new MaterialMenuDrawable(this, Color.WHITE, MaterialMenuDrawable.Stroke.THIN);
        mToolbar.setNavigationIcon(materialMenu);

        mTitle = getTitle();
        getSupportActionBar().setDisplayShowTitleEnabled(true);

        mDrawerLayout = (DrawerLayout)findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle actionBarDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout, mToolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close){
            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
            }

            @Override
            public void onDrawerOpened(View drawerView) {
                super.onDrawerOpened(drawerView);
            }
        };
        mDrawerLayout.setDrawerListener(actionBarDrawerToggle);
        actionBarDrawerToggle.syncState();

        mNavigationView = (NavigationView)findViewById(R.id.navigation_drawer);
        mNavigationView.setNavigationItemSelectedListener(this);
        Bundle bundle = getIntent().getExtras();
        int navItemIdToBeOpened = 0;
        if(bundle != null && bundle.getString(SECTION) != null){
            navItemIdToBeOpened = Section.valueOf(bundle.getString(SECTION)).ordinal();
        }
        //open section
        switch (navItemIdToBeOpened){
            case 0: mNavigationView.getMenu().performIdentifierAction(R.id.navigation_item_1, 0);
                break;
            case 1: mNavigationView.getMenu().performIdentifierAction(R.id.navigation_item_2, 0);
                break;
            case 2: mNavigationView.getMenu().performIdentifierAction(R.id.navigation_item_3, 0);
                break;
            case 3: mNavigationView.getMenu().performIdentifierAction(R.id.navigation_item_4, 0);
                break;
        }
//        mNavigationView.getMenu().performIdentifierAction(R.id.navigation_item_1, 0);
//        this.onNavigationItemSelected((MenuItem)findViewById(R.id.navigation_item_1));

//        mNavigationView = (NavigationDrawerFragment)findViewById(R.id.navigation_drawer);
//
//        // Set up the drawer.
//        mNavigationView.setUp(
//                R.id.navigation_drawer,
//                (DrawerLayout) findViewById(R.id.drawer_layout),
//                mToolbar);

    }

    // method to handle screen navigations through drawer
    @Override
    public boolean onNavigationItemSelected(MenuItem menuItem) {
        menuItem.setChecked(!menuItem.isChecked());
        mDrawerLayout.closeDrawers();
        // update the main content by replacing fragments
        Fragment fragment;
        FragmentManager fragmentManager = getSupportFragmentManager(); // For AppCompat use getSupportFragmentManager
        switch(menuItem.getItemId()) {
            default:
            case R.id.navigation_item_1: //Tasks
                fragment = new TasksFragment();
                mTitle = getString(R.string.title_section1);
                break;
            case R.id.navigation_item_2: //Events
                fragment = new EventsFragment();
                mTitle = getString(R.string.title_section2);
                break;
            case R.id.navigation_item_3: //Notifications
                fragment = new NotificationsFragment();
                mTitle = getString(R.string.title_section3);
                break;
            case R.id.navigation_item_4: //Profile
//                LayoutInflater vi = LayoutInflater.from(this);
//                View v = vi.inflate(R.layout.toolbar_profile, null);
//                ViewGroup.LayoutParams lp = mToolbar.getLayoutParams();
//                lp.height = dpToPx(128);
//                mToolbar.setLayoutParams(lp);
//                mToolbar.addView(v);
//                mToolbar.setVisibility(View.GONE);
                findViewById(R.id.toolbar_profile).setVisibility(View.VISIBLE);
                fragment = new ProfileFragment();
                mTitle = ""; //Profile screen doesnt use title
        }
        fragmentManager.beginTransaction()
                .replace(R.id.container, fragment)
                .commit();
        getSupportActionBar().setTitle(mTitle);
        return true;
//        FragmentManager fragmentManager = getSupportFragmentManager();
//        fragmentManager.beginTransaction()
//                .replace(R.id.container, PlaceholderFragment.newInstance(position + 1))
//                .commit();
    }

    public void openEventSpecificActivity(View eventCard){
        Intent intent = new Intent(this, EventSpecificActivity.class);
        startActivity(intent);
    }

    public static enum Section {TASK, EVENT, NOTIFICATION, PROFILE}

    /**
     * A placeholder fragment containing a simple view.
     */
    public static class EventsFragment extends PlaceholderFragment {

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            rootView = inflater.inflate(R.layout.fragment_events, container, false);
//            EventCard edwardsWedding = (EventCard)rootView.findViewById(R.id.edwards_wedding_card);

            ListView eventList = (ListView) rootView.findViewById(R.id.event_list);
            View header = inflater.inflate(R.layout.textview_category_header, null);
            eventList.addHeaderView(header);
            EventCard edwardsWedding = new EventCard(getActivity());
            edwardsWedding.setEventImage(R.drawable.event_image);
            edwardsWedding.setEventTitle("Edward's Wedding asdf");
            edwardsWedding.setEventTime("Sat, August 1, 7pm - 10pm asdf");
            edwardsWedding.setEventLoc("Marina Bay Sands asdf");
            edwardsWedding.setEventTaskCount("2 tasks : 2 todo asdf");

            ArrayList<EventCard> eventCardArrayList = new ArrayList<EventCard>();
            eventCardArrayList.add(edwardsWedding);

            ViewAdapter viewAdapter = new ViewAdapter(EventCard.class, getActivity(), R.layout.view_event, eventCardArrayList);
            eventList.setAdapter(viewAdapter);

            EventCard test = new EventCard(getActivity());
            test.setEventImage(R.drawable.event_image);
            test.setEventTitle("Edward's Wedding test");
            test.setEventTime("Sat, August 1, 7pm - 10pm test");
            test.setEventLoc("Marina Bay Sands test");
            test.setEventTaskCount("2 tasks : 2 todo test");
            viewAdapter.add(test);

            FloatingActionButton myFab = (FloatingActionButton) rootView.findViewById(R.id.fab);
            myFab.setOnClickListener(new View.OnClickListener() {
                public void onClick(View v) {
                    Intent i = new Intent(getActivity(), AddEventDetails.class);
                    startActivity(i);
                }
            });

            return rootView;
        }

        @Override
        public void onResume() {
            super.onResume();
            //code here to update the array adapter with database
        }
    }

//    public void getCamera(View v) {
////                    Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
////                    startActivityForResult(intent, CAMERA_PIC_REQUEST);
////        Intent takePicIntent = new Intent("android.media.action.IMAGE_CAPTURE");
//
////        takePicIntent .putExtra("crop", "true");
////        takePicIntent .putExtra("outputX", 200);
////        takePicIntent .putExtra("outputY", 200);
////        takePicIntent .putExtra("aspectX", 0);
////        takePicIntent .putExtra("aspectY", 0);
////        takePicIntent .putExtra("scale", true);
////                    takePicIntent .putExtra(MediaStore.EXTRA_OUTPUT, ImageContentProvider.CONTENT_URI);
////        takePicIntent .putExtra("outputFormat", Bitmap.CompressFormat.JPEG.toString());
////        takePicIntent.putExtra("return-data", false);
////        startActivityForResult(takePicIntent, CAMERA_PIC_REQUEST);
//
////                    Intent camera= new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
////                    uriSavedImage=Uri.fromFile(new File("/sdcard/flashCropped.png"));
////                    camera.putExtra(MediaStore.EXTRA_OUTPUT, uriSavedImage);
////                    startActivityForResult(camera, 1);
//
//        Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
//        File tempFile = new File("asdf");
//        try{
//        tempFile = File.createTempFile("crop", "png", Environment.getExternalStorageDirectory());}
//        catch (Exception e) {
//            Log.e("test", e.toString());}
//        tempUri = Uri.fromFile(tempFile);
//        intent.setData(tempUri);
//        intent.putExtra("crop", true);
//        intent.putExtra("outputX", 200);
//        intent.putExtra("outputY", 200);
//        intent.putExtra("aspectX", 0);
//        intent.putExtra("aspectY", 0);
//        intent.putExtra("scale", true);
//        intent.putExtra("noFaceDetection", true);
//        intent.putExtra("output", tempUri); // with this enabled it replaces the original image and without it creates new one in gallery.
//        startActivityForResult(intent, 23);
//    }
//
//    @Override
//    public void onActivityResult(int requestCode, int resultCode, Intent data) {
//        super.onActivityResult(requestCode, resultCode, data);
//        if (requestCode == 1 && resultCode == Activity.RESULT_OK) {
//            Intent intent = new Intent("com.android.camera.action.CROP");
//            intent.setClassName("com.android.camera", "com.android.camera.CropImage");
////            intent.setData(uriSavedImage);
//            intent.putExtra("crop", "true");
//            intent.putExtra("aspectX", 1);
//            intent.putExtra("aspectY", 1);
//            intent.putExtra("outputX", 96);
//            intent.putExtra("outputY", 96);
//            intent.putExtra("noFaceDetection", true);
//            intent.putExtra("return-data", true);
//            startActivityForResult(intent, CAMERA_PIC_REQUEST);
//        }
//        if (requestCode == CAMERA_PIC_REQUEST && resultCode == Activity.RESULT_OK) {
//            if (data == null) {
//                //Display an error
//                Toast.makeText(this, "Image not loaded", Toast.LENGTH_SHORT);
//                return;
//            }
//            try {
//                Context context = this.getApplicationContext();
//                InputStream is = context.getContentResolver().openInputStream(data.getData());
//                Bitmap bm = BitmapFactory.decodeStream(is);
////                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
////                    bm.compress(Bitmap.CompressFormat.JPEG, 75, stream);
//                ((ImageView)this.findViewById(R.id.img)).setImageBitmap(bm);
//            } catch(Exception e) {
//                Toast.makeText(this, "Image not found", Toast.LENGTH_SHORT);
//            }
//        }
//        if (requestCode == 23 && resultCode == Activity.RESULT_OK) {
//            if (data == null) {
//                //Display an error
//                Toast.makeText(this, "Image not loaded", Toast.LENGTH_SHORT);
//                return;
//            }
//            try {
//                Uri uri = data.getData();
//                Bitmap bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), uri);
////                Context context = this.getApplicationContext();
////                InputStream is = context.getContentResolver().openInputStream(data.getData());
////                Bitmap bm = BitmapFactory.decodeStream(is);
////                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
////                    bm.compress(Bitmap.CompressFormat.JPEG, 75, stream);
//                ((ImageView)this.findViewById(R.id.img)).setImageBitmap(bitmap);
//            } catch(Exception e) {
//                Toast.makeText(this, "Image not found", Toast.LENGTH_SHORT);
//            }
//        }
//    }

    /**
     * Task view fragment
     */
    public static class TasksFragment extends PlaceholderFragment {
        private final int CAMERA_RESULT = 1;

        private final String Tag = getClass().getName();

        Button button1;

        ImageView imageView1;

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            rootView = inflater.inflate(R.layout.fragment_tasks, container, false);
//            button1 = (Button)rootView.findViewById(R.id.btn);
//
//            imageView1 = (ImageView)rootView.findViewById(R.id.img);
//
//            button1.setOnClickListener(new View.OnClickListener() {
//                @Override
//                public void onClick(View v) {
//                    Intent intent    = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
//
//                    Uri mImageCaptureUri = Uri.fromFile(new File(Environment.getExternalStorageDirectory(),
//                            "tmp_avatar_" + String.valueOf(System.currentTimeMillis()) + ".jpg"));
//
//                    intent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, mImageCaptureUri);
//
//                    try {
//                        intent.putExtra("return-data", true);
//
//                        startActivityForResult(intent, CAMERA_PIC_REQUEST);
//                    } catch (ActivityNotFoundException e) {
//                        e.printStackTrace();
//                    }
//                }
//            });
            ListView eventList = (ListView) rootView.findViewById(R.id.task_list);

            TaskView prepareRing = new TaskView(getActivity());
            prepareRing.setChecked(false);
            prepareRing.setTaskTitle("Prepare Ring");
            prepareRing.setTaskDesc("Wedding ring must be made of the best quality of ");
            prepareRing.setTaskDate(new GregorianCalendar(2015, Calendar.JULY, 10));

            ArrayList<TaskView> eventCardArrayList = new ArrayList<TaskView>();
            eventCardArrayList.add(prepareRing);

            ViewAdapter viewAdapter = new ViewAdapter(TaskView.class, getActivity(), R.layout.view_event, eventCardArrayList);
            eventList.setAdapter(viewAdapter);

            TaskView testTask = new TaskView(getActivity());
            testTask.setChecked(true);
            testTask.setTaskTitle("Test task");
            testTask.setTaskDesc("Task description. The quick brown fox jumps over the lazy dog. Lorem ipsum here");
            testTask.setTaskDate(new GregorianCalendar(2017, Calendar.DECEMBER, 5));
            viewAdapter.add(testTask);
            return rootView;
        }
//        @Override
//        public void onActivityResult(int requestCode, int resultCode, Intent data) {
//            Bundle extras = data.getExtras();
//
//            if (extras != null) {
//                Bitmap photo = extras.getParcelable("data");
//
//                imageView1.setImageBitmap(photo);
//                String root = Environment.getExternalStorageDirectory().toString();
//                File myDir = new File(root + "/saved_images");
//                myDir.mkdirs();
//                Random generator = new Random();
//                int n = 10000;
//                n = generator.nextInt(n);
//                String fname = "Image-" + n + ".jpg";
//                File file = new File(myDir, fname);
//                if (file.exists()) file.delete();
//                try {
//                    FileOutputStream out = new FileOutputStream(file);
//                    photo.compress(Bitmap.CompressFormat.JPEG, 90, out);
//                    out.flush();
//                    out.close();
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            }
//
//            File f = new File(mImageCaptureUri.getPath());
//
//            if (f.exists()) f.delete();
//        }
    }

    /**
     * Notification view fragment
     */
    public static class NotificationsFragment extends PlaceholderFragment {

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            rootView = inflater.inflate(R.layout.fragment_notifications, container, false);
            ListView eventList = (ListView) rootView.findViewById(R.id.notification_list);
//            ImageView footer = new ImageView(getActivity());
//            footer.setImageResource(R.drawable.divider);
//            eventList.addFooterView(footer);

            NotificationView notificationView = new NotificationView(getActivity());

            ArrayList<NotificationView> eventCardArrayList = new ArrayList<NotificationView>();
            eventCardArrayList.add(notificationView);

            ViewAdapter viewAdapter = new ViewAdapter(TaskView.class, getActivity(), R.layout.view_event, eventCardArrayList);
            eventList.setAdapter(viewAdapter);

            NotificationView notificationView1 = new NotificationView(getActivity());
            notificationView1.setNotificationDesc("Notification 2 description right here lorem ipsum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.");
            notificationView1.setNotificationImage(BitmapFactory.decodeResource(getResources(), R.drawable.event_image));
            viewAdapter.add(notificationView1);
            // insert into main view
//            ViewGroup insertPoint = (ViewGroup) rootView.findViewById(R.id.task_list);
//            insertPoint.addView(notificationView);
            return rootView;
        }
    }

    /**
     * Profile view fragment
     */
    public static class ProfileFragment extends PlaceholderFragment {

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            rootView = inflater.inflate(R.layout.fragment_profile, container, false);
            Toolbar tb = (Toolbar) rootView.findViewById(R.id.toolbar_profile);
            tb.findViewById(R.id.profile_image);
            tb.findViewById(R.id.profile_name);

            return rootView;
        }

        @Override
        public void onDestroyView() {
            //TODO: fix the extended toolbar, ultimate way is to just add a green box with the image and profile into the fragment_profile or make profile screen as new activity
            super.onDestroyView();
//            Toolbar tb = ((Toolbar)getActivity().findViewById(R.id.toolbar));
//            tb.removeView(LayoutInflater.from(getActivity()).inflate(R.layout.toolbar_profile, null));
//            ViewGroup.LayoutParams lp = tb.getLayoutParams();
//            lp.height = dpToPx(56);
//            tb.setLayoutParams(lp);
//            ((Main)getActivity()).restoreActionBar();
//            getActivity().findViewById(R.id.toolbar).setVisibility(View.VISIBLE);
            getActivity().findViewById(R.id.toolbar_profile).setVisibility(View.GONE);
        }
    }
}

/******USELESS METHODS BECAUSE WE DONT NEED ACTION OVERFLOW*****/
//    @Override
//    public boolean onCreateOptionsMenu(Menu menu) {
//        if (!(mDrawerLayout != null && mDrawerLayout.isDrawerOpen(mNavigationView))) {
//            // Only show items in the action bar relevant to this screen
//            // if the drawer is not showing. Otherwise, let the drawer
//            // decide what to show in the action bar.
//            getMenuInflater().inflate(R.menu.events, menu);
////            restoreActionBar();
//            return true;
//        }
//        return super.onCreateOptionsMenu(menu);
//    }
//
//    @Override
//    public boolean onOptionsItemSelected(MenuItem item) {
//        // Handle action bar item clicks here. The action bar will
//        // automatically handle clicks on the Home/Up button, so long
//        // as you specify a parent activity in AndroidManifest.xml.
//        int id = item.getItemId();
//
//        //noinspection SimplifiableIfStatement
//        if (id == R.id.action_settings) {
//            return true;
//        }
//
//        return super.onOptionsItemSelected(item);
//    }